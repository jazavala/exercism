c
triangle?
c
inequality?
c
inequality?
invalid_side?
invalid_sides?
triangle?
c
invalid_side?
triangle?
c
triangle?
c
exit
sides.uniq
c
kind
c
sides
kind
not(inequality)
inequality
c
n
exit
sides[0..1].reduce(:+)
sides.reduce(:+).zero?
sides.reduce(:+)
sides
c
@sides
sides
sidos
sides
not(inequality)
inequality
exit
sides
sum_lengths.zero?
inequality
exit
c
sides
c
FIND_KIND_TRIANGLE.call(:equilateral, uniq_sides)
c
FIND_KIND_TRIANGLE.call(:equilateral, uniq_sides)
exit
uniq_sides
FIND_KIND_TRIANGLE.call(:equilateral, uniq_sides)
c
n
uniq_sides
FIND_KIND_TRIANGLE.call(:equilateral, uniq_sides)
c
uniq_sides
exit
sides
exit
c
@sides
c
exit
@sides
sides
c
n
sides
exit
sides
@sides
